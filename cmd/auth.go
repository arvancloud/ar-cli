package cmd

import (
	"github.com/ebrahimahmadi/ar-cli/config"
	"github.com/ebrahimahmadi/ar-cli/pkg/api"
	"github.com/ebrahimahmadi/ar-cli/pkg/helpers"
	"github.com/ebrahimahmadi/ar-cli/pkg/validator"
	"github.com/spf13/cobra"
)

var (
	authDesc = ` Log in to Arvan API and save login for subsequent use
    First-time users of the client should run this command to connect to a Arvan API,
    establish an authenticated session, and save connection to the configuration file.`
)

var ApiKey string

var authCmd = &cobra.Command{
	Use:   "auth",
	Short: "Log in to Arvan server",
	Long:  authDesc,
	Run: func(cmd *cobra.Command, args []string) {
		arvanConfig := config.GetConfigInfo()

		if validKey, err := validator.IsApiKey(ApiKey); !validKey {
			err := helpers.ToBeColored{Expression: err.Error()}
			err.StdoutError().StopExecution()
		}

		if keySet, err := arvanConfig.SetApiKey(ApiKey).SaveConfig(); !keySet {
			err := helpers.ToBeColored{Expression: err.Error()}
			err.StdoutError().StopExecution()
		}

		testKeyReq := api.RequestBag{
			URL: Config.GetUrl() + "/domains",
		}

		res, err := testKeyReq.Do()

		if err != nil {
			err := helpers.ToBeColored{Expression: err.Error()}
			err.StdoutError().StopExecution()
		}

		defer res.Body.Close()

		api.HandleResponseErr(res)

		notice := helpers.ToBeColored{Expression: "Configuration saved successfully."}
		notice.StdoutNotice()
	},
}

func init() {
	rootCmd.AddCommand(authCmd)
	authCmd.Flags().StringVarP(&ApiKey, "key", "k", "", "Api Key generated by Arvan")
	authCmd.MarkFlagRequired("key")
}
